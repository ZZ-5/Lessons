// Java Script - язык динамической типизации. Браузер определяет тип данных в момент выполнения скрипта

// Переменные

// var - устаревшая переменная. не используется в современных скриптах
// let - какая-то переменная, которая может изменить свое значение где-то в коде
// const - неизменное значение. Какая-то переменная, которая НЕ может поменять свое значение

// ВАЖНО ЗНАТЬ: чем отличаются переменные let и const от var

// Типы данных

//  string - строка
//  number (BigInt)
//  boolean - логическое true/false
//  object - обьект
//  undefined - специальный тип
//  null - специальный тип
//  symbol

// Строки
// let pasha = "Паша";

//Okэy
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

// Числа
// let a = 123;
// Если говорить совсем точно, то, технически, тип number может хранить большие целые числа (до 1.7976931348623157 * 10308), но за пределами безопасного диапазона целых чисел ±(253-1) будет ошибка точности, так как не все цифры помещаются в фиксированную 64-битную память.

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

// let a = 123;
// console.log("a0 is ", Boolean(a)); // true

// a = -123;
// console.log("a1 is ", Boolean(a)); // true

// a = 123.123;
// console.log("a2 is ", Boolean(a)); // true

// a = 0;
// console.log("a2 is ", Boolean(a)); // false

// boolean
// let a = true;
// let b = false;
// let c = Boolean(0);

// console.log("c0 is ", c); // false

// c = Boolean(-1);
// console.log("c1 is ", c); // true

// c = Boolean("");
// console.log("c2 is ", c); // false

// c = Boolean("Pasha");
// console.log("c3 is ", c); // true

// c = Boolean(123);
// console.log("c4 is ", c); // true

// c = Boolean({});
// console.log("c5 is ", c); // true

// c = Boolean(undefined);
// console.log("c6 is ", c); // false

// c = Boolean(null);
// console.log("c7 is ", c); // true

// c = Boolean([]);
// console.log("c8 is ", c); // true

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

// let a;

// console.log("a1 is ", a); // undefined
// console.log("a1 is ", typeof a); // undefined

// a = "Me";

// console.log("a2 is ", a); // Me
// console.log("a2 is ", typeof a); // string

// Оператор typeof
// let c = {};
// console.log("c1 is ", typeof c); // object

// c = undefined;
// console.log("c2 is ", typeof c); // undefined

// c = null;
// console.log("c3 is ", typeof c); // object

// c = [];
// console.log("c4 is ", typeof c); // object

// c = 123;
// console.log("c5 is ", typeof c); // number

// c = "qweqew";
// console.log("c6 is ", typeof c); // string

// c = "123123";
// console.log("c7 is ", typeof c); // string

// c = () => new Promise();
// console.log("c8 is ", typeof c); // function

// c = () => new Promise();
// console.log("c9 is ", c); // function

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

// Преобразования типов

// const a = "Pasha";
// const b = 123;
// const c = "123";

// console.log("a + b = ", a + b); // Pasha123
// console.log("с = ", c); // "123"
// console.log("с = ", b + c); // "123123"
// console.log("с = ", c + b); // "123123"
// console.log("с = ", +c); // 123
// console.log("a = ", +a); // NaN (not a number)

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

// Базовые Операторы
// Сложение +,
// Вычитание -,
// Умножение *,
// Деление /,
// Взятие остатка от деления %,
// Возведение в степень **.

// const a = 10;
// console.log("a = ", 10 % 2); // 0
// console.log("a = ", 10 % 3); // 1
// console.log("a = ", 10 % 4); // 2
// console.log("a = ", 10 % 6); // 4
// console.log("a = ", 10 % 7); // 3

// Пример возведения в степень:
// console.log(2 ** 3); // 8
// console.log(Math.pow(2, 3)); // 8

// Math.ceil - округление вверх (до целого)
// console.log(Math.ceil(6.01)); // 7

// // Math.floor - округление вниз (до целого)
// console.log(Math.floor(6.99)); // 6

// // Math.round - округление до ближайшего целого числа
// console.log(Math.round(6.5)); // 7

// посчитать в массиве только четные числа
// let a = [1, 2, 3, 4, 5, 6, 7, 8, 9];

// function sumOfEven(a) {
//   const res = a.map((i) => (i % 2 === 0 ? "Четное" : "Нечетное"));

//   return res;
// }

// console.log(sumOfEven(a));

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

// Операнд - это число по одну или другую сторону от оператора
// a + b - в этом случае + является бинарным оператором, потому что по бокам от него стоят 2 операнда: a и b
// +b - в этом случае + является унарным оператором, потому что по бокам от него стоит 1 операнд: b

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

// Условия и логические операторы
// Конструкция if: if (условие) { действия } else { действия }
// Тернарный оператор: условие ? действия при true : действия при false
// const a = 2;
// const b = "Pasha";
// if (a === 2) {
//   console.log(true);
// } else {
//   console.log(false);
// } // true

// console.log(a == "2" ? true : false); // true
// console.log(a === "2" ? false : true); // true

// && - логическое И. В случае с логическим И правило работает так, что для истинности все условия должны быть истинны
// Пример:
// if (a === 2 && b === "Lesha") {
//   console.log("Всё верно");
// } else {
//   console.log("Всё неверно");
// } // Всё неверно

// || - логическое ИЛИ. Условие будет истинным если истинно хотя бы 1 подусловие.
// if (a === 2 || (b === "Lesha" && false)) {
//   console.log("Всё верно");
// } else {
//   console.log("Всё неверно");
// } // Всё верно

// const b = false
// let a = 'pasha' && b
// let c;

// c = a ? true : false
// console.log('c = ', c) // false

// a = 'pasha' || b
// c = a ? true : false
// console.log('c = ', c) // true

// != - не равно
// == - нестрогое равенство (пытается сделать приведение типов)
// === - строгое равенство
// > - больше
// < - меньше
// >= - больше или равно
// <= - меньше или равно
// Оператор нулевого слияния (??) - оператор ?? возвращает первый аргумент, если он не null/undefined, иначе второй

// let a = 10

// if (a === 10) {
//   console.log('верно')
// } else {
//   console.log('неверно')
// } // верно

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

// Обьект - ссылочный тип данный. В нём можно изменить значение, даже если мы заводим его через const

// Пример с обьектом:

// const a = {
//   a: "Павел Игоревич",
// };

// a.b = "Алексей Алексеевич";

// console.log("a is ", a);