// Функции

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

// Function Expression (функциональное выражение). Задаём функцию и сразу кладём её в переменную sayHi
// let sayHi = function() {
//   console.log( "Привет" );
// };

// console.log(sayHi)

// Function Declaration (обьявление функции). Задаем функцию и никуда её не присваеваем
// function sayHi() {
//   console.log( "Привет" );
// }

// console.log(sayHi)

// Отличия:
// Function Expression создаётся, когда выполнение доходит до него, и затем уже может использоваться
// Function Declaration может быть вызвана раньше, чем она объявлена.

// Примеры:
// sayHi("Вася");

// function sayHi(name) {
//   console.log(`Привет, ${name}`);
// }

////////////////////////////////////

// sayHi("Вася");

// let sayHi = function(name) {
//   console.log( `Привет, ${name}` );
// };

// В строгом режиме, когда Function Declaration находится в блоке {...}, функция доступна везде внутри блока. Но не снаружи него.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

// Arrow function (стрелочные функции) - более лаконичный синтаксис для создания функций, но имеющий некоторые отличия:
// 1. У стрелочной функции нет this - об этом узнаем позже
// 2. У стрелочной функции нет arguments
// Синтаксис: let func = (arg1, arg2, ...argN) => expression;

// let sum = (a, b) => a + b;
// console.log(sum(2, 2));

// Многострочные:
// let sum = (a, b) => {
//   let result = a + b;
//   return result; // если мы используем фигурные скобки, то нам нужно явно указать "return"
// };
// console.log(sum(2, 2));

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

// Named Function Expression

// Поскольку функция - это обьект, у неё есть несколько полезных свойств:

// name - имя функции
// function sayHi() {
//   console.log("Hi");
// }

// Что выведет?
// console.log(sayHi.name);

// length - количество параметров функции

// function f1(a) {}
// function f2(a, b) {}
// function many(a, b, ...more) {}

// что выведет?
// console.log(f1.length);
// console.log(f2.length);
// console.log(many.length);

// пользовательские свойства
// function sayHi() {
//   console.log("Hi");

//   // давайте посчитаем, сколько вызовов мы сделали
//   sayHi.counter++;
// }
// sayHi.counter = 0; // начальное значение

// sayHi(); // Hi
// sayHi(); // Hi

// console.log(`Вызвана ${sayHi.counter} раза`); // Вызвана 2 раза

// ВАЖНО: свойства не являются переменной. Если задать свойство counter и перменную внутри функции let counter, то они будут независимы

// Named Function Expression
// что будет выведено в консоль?
// let sayHi = function func(who) {
//   if (who) {
//     alert(`Hello, ${who}`);
//   } else {
//     func("Guest");
//   }
// };

// console.log(sayHi());
// console.log(func());
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
